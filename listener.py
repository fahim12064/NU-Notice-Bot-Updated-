import os
import requests
import time

# --- Configuration ---
# ‡¶è‡¶á ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã GitHub Secrets ‡¶è ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GITHUB_TOKEN = os.getenv("TOKE_GITHUB_BOT")
GITHUB_OWNER = "fahim12064"
GITHUB_REPO = "NU-Notice-Bot-Updated-"
WORKFLOW_FILE = "main.yml"
REF = "main"

# --- Global Variables ---
last_update_id = 0

def trigger_github_workflow():
    """GitHub Actions workflow ‡¶ü‡ßç‡¶∞‡¶ø‡¶ó‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø API ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡ßü‡•§"""
    print("Attempting to trigger GitHub workflow...")
    
    url = f"https://api.github.com/repos/{GITHUB_OWNER}/{GITHUB_REPO}/actions/workflows/{WORKFLOW_FILE}/dispatches"
    headers = {
        "Accept": "application/vnd.github+json",
        "Authorization": f"token {GITHUB_TOKEN}"
    }
    data = {"ref": REF}

    try:
        response = requests.post(url, headers=headers, json=data, timeout=15 )
        if response.status_code == 204:
            print("‚úÖ GitHub workflow successfully triggered!")
            return True
        else:
            print(f"‚ùå Failed to trigger workflow. Status: {response.status_code}, Response: {response.text}")
            return False
    except Exception as e:
        print(f"‚ö†Ô∏è An error occurred while triggering the workflow: {e}")
        return False

def send_telegram_message(chat_id, text):
    """‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡ßü‡•§"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    try:
        requests.post(url, json=payload, timeout=10 )
        print(f"üì® Reply sent to chat_id: {chat_id}")
    except Exception as e:
        print(f"‚ùå Failed to send reply message: {e}")

def get_telegram_updates():
    """‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡ßá‡•§"""
    global last_update_id
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates"
    params = {"offset": last_update_id + 1, "timeout": 30}
    
    try:
        response = requests.get(url, params=params, timeout=40 )
        if response.status_code == 200:
            updates = response.json().get("result", [])
            if updates:
                # ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶¨‡ßú update_id ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶ø ‡¶Ø‡¶æ‡¶§‡ßá ‡¶è‡¶ï‡¶á ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶®‡¶æ ‡¶π‡ßü
                last_update_id = updates[-1]["update_id"]
                return updates
    except Exception as e:
        print(f"‚ùå Error getting Telegram updates: {e}")
    
    return []

def process_messages():
    """‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç 'scrape' ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶ñ‡ßã‡¶Å‡¶ú‡ßá‡•§"""
    print("Checking for new messages...")
    updates = get_telegram_updates()
    
    for update in updates:
        if "message" in update and "text" in update["message"]:
            message = update["message"]
            chat_id = message["chat"]["id"]
            text = message["text"].strip().lower()
            first_name = message.get("from", {}).get("first_name", "‡¶¨‡¶®‡ßç‡¶ß‡ßÅ")

            print(f"üì© Message received from {first_name} (Chat ID: {chat_id}): '{text}'")

            if text == "scrape":
                print(f"‚ö° 'scrape' command received from {first_name}.")
                
                # ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶Ø‡ßá ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá
                send_telegram_message(chat_id, "üîÑ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶™‡ßá‡ßü‡ßá‡¶õ‡¶ø‡•§ GitHub workflow ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                
                # GitHub workflow ‡¶ü‡ßç‡¶∞‡¶ø‡¶ó‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ
                if trigger_github_workflow():
                    send_telegram_message(chat_id, "‚úÖ Workflow ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá! ‡¶®‡ßã‡¶ü‡¶ø‡¶∂‡¶ó‡ßÅ‡¶≤‡ßã —Å–∫–æ—Ä–æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá‡•§")
                else:
                    send_telegram_message(chat_id, "‚ùå ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, workflow ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")

def main():
    """‡¶¨‡¶ü‡ßá‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶≤‡ßÅ‡¶™, ‡¶Ø‡¶æ ‡¶∏‡¶¨ ‡¶∏‡¶Æ‡ßü ‡¶ö‡¶≤‡¶§‡ßá ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡•§"""
    if not TELEGRAM_BOT_TOKEN or not GITHUB_TOKEN:
        print("‚ùå Error: TELEGRAM_BOT_TOKEN or GITHUB_TOKEN is not set. Please check your repository secrets.")
        return
        
    print("ü§ñ Bot started... Waiting for 'scrape' command.")
    # ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶¨‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∂‡ßá‡¶∑ ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡•§ GitHub Actions ‡¶è‡¶ü‡¶ø‡¶ï‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡¶æ‡¶¨‡ßá‡•§
    process_messages()
    print("Cycle finished. Waiting for the next run.")

if __name__ == "__main__":
    main()

